/*
 * Copyright (C) 2015 Jared Boone, ShareBrained Technology, Inc.
 * Copyright (C) 2016 Furrtek
 *
 * This file is part of PortaPack.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifndef __BITMAP_HPP__
#define __BITMAP_HPP__

#include "ui.hpp"

namespace ui {

// Use firmware/tools/make_bitmap.py !

static constexpr uint8_t bitmap_stealth_data[] = {
	0x00, 0x00,
	0x00, 0x00,
	0xE0, 0x07,
	0xF8, 0x1F,
	0xFC, 0x3F,
	0xFC, 0x3F,
	0xE4, 0x27,
	0xC4, 0x23,
	0xEC, 0x37,
	0x7C, 0x3E,
	0x7C, 0x1E,
	0x2C, 0x0C,
	0x0C, 0x00,
	0x0C, 0x00,
	0x0C, 0x00,
	0x00, 0x00
};

static constexpr Bitmap bitmap_stealth {
	{ 16, 16 }, bitmap_stealth_data
};

static constexpr uint8_t bitmap_speaker_data[] = {
	0x00, 0x00,
	0x00, 0x20,
	0x00, 0x30,
	0x00, 0x38,
	0x00, 0x3C,
	0xDC, 0x3E,
	0xDC, 0x3F,
	0xDC, 0x3F,
	0xDC, 0x3F,
	0xDC, 0x3F,
	0xDC, 0x3E,
	0x00, 0x3C,
	0x00, 0x38,
	0x00, 0x30,
	0x00, 0x20,
	0x00, 0x00
};

static constexpr Bitmap bitmap_speaker {
	{ 16, 16 }, bitmap_speaker_data
};

static constexpr uint8_t bitmap_more_data[] = {
	0x00, 0x00,
	0xC0, 0x03,
	0xC0, 0x03,
	0xC0, 0x03,
	0xC0, 0x03,
	0xC0, 0x03,
	0xC0, 0x03,
	0xC0, 0x03,
	0xC6, 0x63,
	0xCF, 0xF3,
	0xDE, 0x7B,
	0xFC, 0x3F,
	0xF8, 0x1F,
	0xF0, 0x0F,
	0xE0, 0x07,
	0xC0, 0x03
};

static constexpr Bitmap bitmap_more {
	{ 16, 16 }, bitmap_more_data
};

static constexpr uint8_t bitmap_rssipwm_data[] = {
	0x00, 0x00, 0x00,
	0x8F, 0xE7, 0x7D,
	0x51, 0x10, 0x10,
	0x51, 0x10, 0x10,
	0x8F, 0xE3, 0x10,
	0x09, 0x04, 0x11,
	0x11, 0x04, 0x11,
	0xD1, 0xF3, 0x7C,
	0x00, 0x00, 0x00,
	0x3F, 0x1E, 0x1E,
	0x21, 0x12, 0x12,
	0x21, 0x12, 0x12,
	0x21, 0x12, 0x12,
	0x21, 0x12, 0x12,
	0x21, 0x12, 0x12,
	0xE1, 0xF3, 0x73
};

static constexpr Bitmap bitmap_rssipwm {
	{ 24, 16 }, bitmap_rssipwm_data
};

static constexpr uint8_t bitmap_keyboard_data[] = {
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x00,
	0xF0, 0x1F,
	0x10, 0x11,
	0x10, 0x11,
	0x10, 0x11,
	0xFC, 0x7F,
	0x44, 0x44,
	0x44, 0x44,
	0x44, 0x44,
	0xFC, 0x7F,
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x00,
};

static constexpr Bitmap bitmap_keyboard {
	{ 16, 16 }, bitmap_keyboard_data
};

static constexpr uint8_t bitmap_unistroke_data[] = {
	0x33, 0xC0,
	0x33, 0x00,
	0xB3, 0xCD,
	0xB3, 0xDF,
	0xB3, 0xD9,
	0xB3, 0xD9,
	0x9E, 0xD9,
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x1C,
	0x06, 0x3E,
	0x06, 0x67,
	0xCE, 0x43,
	0xFC, 0x01,
	0x78, 0x40,
	0x00, 0x00
};

static constexpr Bitmap bitmap_unistroke {
	{ 16, 16 }, bitmap_unistroke_data
};

static constexpr uint8_t bitmap_record_data[] = {
	0x00, 0x00,
	0x00, 0x00,
	0xc0, 0x03,
	0xf0, 0x0f,
	0xf8, 0x1f,
	0xf8, 0x1f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xf8, 0x1f,
	0xf8, 0x1f,
	0xf0, 0x0f,
	0xc0, 0x03,
	0x00, 0x00,
	0x00, 0x00,
};

static constexpr Bitmap bitmap_record {
	{ 16, 16 }, bitmap_record_data
};

static constexpr uint8_t bitmap_stop_data[] = {
	0x00, 0x00,
	0x00, 0x00,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0xfc, 0x3f,
	0x00, 0x00,
	0x00, 0x00,
};

static constexpr Bitmap bitmap_stop {
	{ 16, 16 }, bitmap_stop_data
};

static constexpr uint8_t bitmap_sleep_data[] = {
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x04,
	0x00, 0x08,
	0x00, 0x18,
	0x00, 0x18,
	0x00, 0x38,
	0x00, 0x3c,
	0x00, 0x3c,
	0x00, 0x3e,
	0x84, 0x1f,
	0xf8, 0x1f,
	0xf0, 0x0f,
	0xc0, 0x03,
	0x00, 0x00,
	0x00, 0x00,
};

static constexpr Bitmap bitmap_sleep {
	{ 16, 16 }, bitmap_sleep_data
};

static constexpr uint8_t bitmap_camera_data[] = {
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x00,
	0xcc, 0x03,
	0xe8, 0x07,
	0xfc, 0x3f,
	0x3c, 0x3c,
	0x9c, 0x39,
	0xdc, 0x3b,
	0xdc, 0x3b,
	0x9c, 0x39,
	0x3c, 0x3c,
	0xfc, 0x3f,
	0x00, 0x00,
	0x00, 0x00,
	0x00, 0x00,
};

static constexpr Bitmap bitmap_camera {
	{ 16, 16 }, bitmap_camera_data
};

static constexpr uint8_t bitmap_sd_card_ok_data[] = {
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0xf0, 0x1f,
	0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f,
	0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f,
	0xf8, 0x1f, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00,
};

static constexpr Bitmap bitmap_sd_card_ok {
	{ 16, 16 }, bitmap_sd_card_ok_data
};

static constexpr uint8_t bitmap_sd_card_unknown_data[] = {
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0xf0, 0x1f,
	0x38, 0x1c, 0x98, 0x19, 0xf8, 0x19, 0xf8, 0x1c,
	0x78, 0x1e, 0x78, 0x1e, 0xf8, 0x1f, 0x78, 0x1e,
	0xf8, 0x1f, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00,
};

static constexpr Bitmap bitmap_sd_card_unknown {
	{ 16, 16 }, bitmap_sd_card_unknown_data
};

static constexpr uint8_t bitmap_sd_card_error_data[] = {
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0xf0, 0x1f,
	0xf8, 0x1f, 0xd8, 0x1b, 0x98, 0x19, 0x38, 0x1c,
	0x78, 0x1e, 0x38, 0x1c, 0x98, 0x19, 0xd8, 0x1b,
	0xf8, 0x1f, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00,
};

static constexpr Bitmap bitmap_sd_card_error {
	{ 16, 16 }, bitmap_sd_card_error_data
};

static constexpr uint8_t bitmap_target_calibrate_data[] = {
	0x02, 0x00, 0x00, 0x40,
	0x07, 0x00, 0x00, 0xe0,
	0x0e, 0x00, 0x00, 0x70,
	0x1c, 0x00, 0x00, 0x38,

	0x38, 0x00, 0x00, 0x1c,
	0x70, 0x00, 0x00, 0x0e,
	0xe0, 0x00, 0x00, 0x07,
	0xc0, 0x01, 0x80, 0x03,
	
	0x80, 0x03, 0xc0, 0x01,
	0x00, 0x07, 0xe0, 0x00,
	0x00, 0x0e, 0x70, 0x00,
	0x00, 0x1c, 0x38, 0x00,

	0x00, 0x38, 0x1c, 0x00,
	0x00, 0x30, 0x0c, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x30, 0x0c, 0x00,
	0x00, 0x38, 0x1c, 0x00,

	0x00, 0x1c, 0x38, 0x00,
	0x00, 0x0e, 0x70, 0x00,
	0x00, 0x07, 0xe0, 0x00,
	0x80, 0x03, 0xc0, 0x01,

	0xc0, 0x01, 0x80, 0x03,
	0xe0, 0x00, 0x00, 0x07,
	0x70, 0x00, 0x00, 0x0e,
	0x38, 0x00, 0x00, 0x1c,

	0x1c, 0x00, 0x00, 0x38,
	0x0e, 0x00, 0x00, 0x70,
	0x07, 0x00, 0x00, 0xe0,
	0x02, 0x00, 0x00, 0x40,
};

static constexpr Bitmap bitmap_target_calibrate {
	{ 32, 32 }, bitmap_target_calibrate_data
};

static constexpr uint8_t bitmap_target_verify_data[] = {
	0x00, 0xe0, 0x07, 0x00,
	0x00, 0xfc, 0x3f, 0x00,
	0x00, 0x1f, 0xf8, 0x00,
	0xc0, 0x03, 0xc0, 0x03,

	0xe0, 0x00, 0x00, 0x07,
	0x70, 0x00, 0x00, 0x0e,
	0x38, 0x00, 0x00, 0x1c,
	0x18, 0x00, 0x00, 0x18,

	0x0c, 0x00, 0x00, 0x30,
	0x0c, 0x00, 0x00, 0x30,
	0x06, 0x00, 0x00, 0x60,
	0x06, 0x00, 0x00, 0x60,

	0x06, 0x00, 0x00, 0x60,
	0x03, 0x80, 0x01, 0xc0,
	0x03, 0x80, 0x01, 0xc0,
	0x03, 0xe0, 0x07, 0xc0,

	0x03, 0xe0, 0x07, 0xc0,
	0x03, 0x80, 0x01, 0xc0,
	0x03, 0x80, 0x01, 0xc0,
	0x06, 0x00, 0x00, 0x60,

	0x06, 0x00, 0x00, 0x60,
	0x06, 0x00, 0x00, 0x60,
	0x0c, 0x00, 0x00, 0x30,
	0x0c, 0x00, 0x00, 0x30,

	0x18, 0x00, 0x00, 0x18,
	0x38, 0x00, 0x00, 0x1c,
	0x70, 0x00, 0x00, 0x0e,
	0xe0, 0x00, 0x00, 0x07,

	0xc0, 0x03, 0xc0, 0x03,
	0x00, 0x1f, 0xf8, 0x00,
	0x00, 0xfc, 0x3f, 0x00,
	0x00, 0xe0, 0x07, 0x00,
};

static constexpr Bitmap bitmap_target_verify {
	{ 32, 32 }, bitmap_target_verify_data
};

} /* namespace ui */

#endif/*__BITMAP_HPP__*/
